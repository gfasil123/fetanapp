rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isDriver() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Rules for users collection
    match /users/{userId} {
      // Allow users to read their own document and admins to read all
      allow read: if isOwner(userId) || isAdmin();
      
      // Allow admins to write to all documents
      allow write: if isAdmin();
      
      // Allow users to update only their own document
      allow update: if isOwner(userId);
      
      // Allow creation of user documents with their own ID
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Rules for users with driver role - allowing all authenticated users to read driver profiles
    match /users/{userId} {
      allow read: if isAuthenticated() && 
        resource.data.role == 'driver';
    }
    
    // Rules for orders collection
    match /orders/{orderId} {
      // Allow users to create orders
      allow create: if isAuthenticated();
      
      // Allow users to read their own orders
      allow read: if isAuthenticated() && 
        (resource.data.customerId == request.auth.uid || 
         resource.data.driverId == request.auth.uid || 
         isAdmin());
      
      // Allow users to update orders they created or are assigned to
      allow update: if isAuthenticated() && 
        (resource.data.customerId == request.auth.uid || 
         resource.data.driverId == request.auth.uid || 
         isAdmin());
    }
    
    // For development, you can leave this catch-all rule, but remove for production
    match /{document=**} {
      allow read, write: if true;
    }
  }
} 